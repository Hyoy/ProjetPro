Imports System.Data
Imports Microsoft.Data.Sqlite
Imports iTextSharp.text
Imports iTextSharp.text.pdf
Imports System.IO
Imports System.Reflection.Metadata
Imports Document = iTextSharp.text.Document
Imports System.Data.OleDb
Imports System.Diagnostics.Eventing.Reader

Public Class PdfPageEvent
    Inherits PdfPageEventHelper

    Private ReadOnly img As Image
    Private ReadOnly numProd As String
    Private ReadOnly typeVI As String

    Public Sub New(image As Image, numProd As String, typeVI As String)
        img = image
        Me.numProd = numProd
        Me.typeVI = typeVI
    End Sub

    Public Overrides Sub OnEndPage(writer As PdfWriter, document As Document)
        MyBase.OnEndPage(writer, document)

        ' Ajout de l'image
        img.SetAbsolutePosition(-5, 505)
        img.ScaleToFit(100, 100)
        document.Add(img)
    End Sub
End Class




Public Class Form1
    Dim typeVI As String = ""
    Dim numProd As String = ""
    Dim fichierVI As String = ""
    Dim poste As String = ""
    Dim bddLocal As String = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Setup\BDD\01_Configuration\Config_Bdd.mdb;Jet OLEDB:Database Password=ACMAT"
    Dim queryLocal As String = "SELECT poste FROM 00_07b_Ligne_de_production WHERE Actif = 'OUI'"
    Dim bddChargement As String = ""
    Dim queryTypeVI As String = "SELECT Modèle_véhicule FROM 01_01_EOP_POSTE_RESEAU WHERE numero_de_production = '" & numProd & "'"

    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load

        Using connection As New OleDbConnection(bddLocal)
            Using command As New OleDbCommand(queryLocal, connection)
                connection.Open()
                Dim reader As OleDbDataReader = command.ExecuteReader()
                If reader.Read() Then
                    poste = reader.GetString(0)
                End If
                reader.Close()
            End Using
            connection.Close()
        End Using

        Dim queryChargement As String = "SELECT numero_de_production,Nom_du_fichier FROM 01_01_EOP_POSTE_RESEAU WHERE Poste_de_production = '" & poste & "'"

        Select Case True
            Case poste.StartsWith("VB")
                bddChargement = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=\\vcn.ds.volvo.net\cli-sd\sd0627\047962\03_SUIVI_PROD\02_LIGNE_DE_PRODUCTION_VBL\02_Base_données_Chargement_MV\Chargement_VBL.mdb"
            Case poste.StartsWith("R")
                bddChargement = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=\\vcn.ds.volvo.net\cli-sd\sd0627\047962\03_SUIVI_PROD\04_LIGNE_DE_PRODUCTION_GBC-VLRA\02_Base_données_Chargement_MV\Chargement_GBC.mdb"
            Case poste.StartsWith("T")
                bddChargement = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=\\vcn.ds.volvo.net\cli-sd\sd0627\047962\03_SUIVI_PROD\03_LIGNE_DE_PRODUCTION_TRM10000\02_Base_données_Chargement_MV\Chargement_TRM10000.mdb"
            Case poste.StartsWith("PV")
                bddChargement = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=\\vcn.ds.volvo.net\cli-sd\sd0627\047962\03_SUIVI_PROD\05_LIGNE_DE_PRODUCTION_PVP\02_Base_données_Chargement_MV\Chargement_PVP.mdb"
            Case Else
                MsgBox("erreur!")
        End Select

        Using connection As New OleDbConnection(bddChargement)
            Using command As New OleDbCommand(queryChargement, connection)
                connection.Open()
                Dim reader As OleDbDataReader = command.ExecuteReader()
                If reader.Read() Then
                    numProd = reader.GetString(0)
                    fichierVI = reader.GetString(1)
                End If
                reader.Close()
            End Using
            connection.Close()
        End Using

        Dim queryTypeVI As String = "SELECT Modèle_véhicule FROM 01_01_EOP_POSTE_RESEAU WHERE numero_de_production = '" & numProd & "'"

        Using connection As New OleDbConnection(bddChargement)
            Using command As New OleDbCommand(queryTypeVI, connection)
                connection.Open()
                Dim reader As OleDbDataReader = command.ExecuteReader()
                If reader.Read() Then
                    typeVI = reader.GetString(0)
                End If
                reader.Close()
            End Using
            connection.Close()
        End Using


    End Sub


    Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Button2.Click
        Dim sqlite_conn As SqliteConnection = Nothing
        Dim access_conn As OleDbConnection = Nothing
        Dim myCmd As SqliteCommand = Nothing
        Dim access_cmd As OleDbCommand = Nothing
        Try

            sqlite_conn = New SqliteConnection("Data Source=C:\Users\A479250\Desktop\db csv\VB40-1682-4-40.db")
            sqlite_conn.Open()
            myCmd = sqlite_conn.CreateCommand()
            myCmd.CommandText = "SELECT jd.id, jd.time, js.name, js.torque, jd.max_torque, jd.serno FROM joint_data jd INNER JOIN joint_setting js ON jd.settings_id = js.id"
            Dim myReader As SqliteDataReader = myCmd.ExecuteReader()
            access_conn = New OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Users\A479250\Desktop\VBL_EOP_188.mdb")
            access_conn.Open()
            access_cmd = access_conn.CreateCommand()

            Dim i As Integer = 0
            While myReader.Read()
                Dim unixTime As Long = Convert.ToInt64(myReader("time"))
                Dim dateTime As DateTime = New DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(unixTime)
                Dim name As String = myReader("name").ToString()
                Dim torque As Double = Convert.ToDouble(myReader("torque").ToString())
                Dim max_torque As Double = Convert.ToDouble(myReader("max_torque")) / 1000.0
                Dim serno As String = myReader("serno").ToString()
                Dim codeUnique As String = typeVI & "-" & poste & "-" & numProd

                Dim difference As Double = Math.Abs(max_torque - torque)
                Dim tolerance As Double = 20
                Dim conforme As String = "Conforme"
                If difference > max_torque * (tolerance / 100.0) Then
                    conforme = "Non Conforme"
                End If

                Dim max_torqueFormatted As String = max_torque.ToString("F3")
                Dim torqueFormatted As String = torque.ToString("F3")


                access_cmd.CommandText = "INSERT INTO 03_02_Tbl_Serrages_ALL (code_unique, date_serrage, Nom, valeur_cible, serrage_realise, serno, resultat, poste) VALUES (@id, @time, @name, @torque, @max_torque, @serno, @resultat, @poste)"
                access_cmd.Parameters.Clear()
                access_cmd.Parameters.AddWithValue("@id", codeUnique & "-" & i)
                access_cmd.Parameters.AddWithValue("@time", dateTime)
                access_cmd.Parameters.AddWithValue("@name", name)
                access_cmd.Parameters.AddWithValue("@torque", torqueFormatted)
                access_cmd.Parameters.AddWithValue("@max_torque", max_torqueFormatted)
                access_cmd.Parameters.AddWithValue("@serno", serno)
                access_cmd.Parameters.AddWithValue("@resultat", conforme)
                access_cmd.Parameters.AddWithValue("@poste", poste)
                access_cmd.ExecuteNonQuery()
                i = i + 1
            End While


            MessageBox.Show("Insertion terminée avec succès.")

        Catch ex As Exception
            MessageBox.Show("Une erreur est survenue : " & ex.Message)
        Finally

            If myCmd IsNot Nothing Then myCmd.Dispose()
            If access_cmd IsNot Nothing Then access_cmd.Dispose()
            If sqlite_conn IsNot Nothing AndAlso sqlite_conn.State = ConnectionState.Open Then sqlite_conn.Close()
            If access_conn IsNot Nothing AndAlso access_conn.State = ConnectionState.Open Then access_conn.Close()
        End Try
    End Sub



    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Dim sqlite_conn As SqliteConnection
        Dim myCmd As SqliteCommand
        Dim myReader As SqliteDataReader

        sqlite_conn = New SqliteConnection("Data Source=C:\Users\A479250\Desktop\db csv\VB40-1682-4-40.db")
        sqlite_conn.Open()
        myCmd = sqlite_conn.CreateCommand
        myCmd.CommandText = "SELECT jd.id, jd.time, js.name, js.torque, jd.max_torque, jd.serno FROM joint_data jd INNER JOIN joint_setting js ON jd.settings_id = js.id"
        myReader = myCmd.ExecuteReader

        Dim document As New Document(PageSize.A4.Rotate())
        Dim output As New FileStream("C:\Users\A479250\Desktop\VB40-1682-4-40.pdf", FileMode.Create)

        Dim image As iTextSharp.text.Image = iTextSharp.text.Image.GetInstance(vraiPdfExport.My.Resources.Arquus, System.Drawing.Imaging.ImageFormat.Png)


        Dim pageEvent As New PdfPageEvent(image, numProd, typeVI)
        Dim writer = PdfWriter.GetInstance(document, output)
        document.Open()
        writer.PageEvent = pageEvent




        'Dim img As Image = Image.GetInstance("C:\Users\A479250\source\reposd\vraiPdfExport\Resources\Arquus.png")
        'img.SetAbsolutePosition(-5, 750)
        'img.ScaleToFit(100, 100)
        'document.Add(img)
        Dim font As iTextSharp.text.Font = FontFactory.GetFont(FontFactory.HELVETICA, 9)
        Dim titrefont = FontFactory.GetFont("Arial", 28, Font.BOLD, BaseColor.BLACK)


        Dim pageWidth As Single = document.PageSize.Width - document.LeftMargin - document.RightMargin


        Dim pdfTable As New PdfPTable(8)
        pdfTable.TotalWidth = pageWidth
        pdfTable.LockedWidth = True


        pdfTable.SplitLate = False




        Dim pages As Integer = 0
        Dim isFirstPage As Boolean = True
        Dim countVB As Integer = 0
        Dim serrages As New List(Of Dictionary(Of String, Object))()
        Dim totalConformes As Integer = 0
        Dim totalNonConformes As Integer = 0
        Dim summaryData As New Dictionary(Of String, Dictionary(Of String, Integer))()
        Dim conformity As String = "Oui"

        While myReader.Read()
            Dim name As String = myReader("name").ToString()



            If isFirstPage Then

                Dim Titre As New Paragraph("Rapport Serrage : " & typeVI & " " & numProd, titrefont)
                Titre.Alignment = Element.ALIGN_CENTER
                Titre.SpacingAfter = 10
                Titre.SpacingBefore = 10

                document.Add(Titre)


                pdfTable.AddCell(New PdfPCell(New Phrase("ID", font)) With {.BackgroundColor = New BaseColor(173, 216, 230), .HorizontalAlignment = Element.ALIGN_CENTER})
                pdfTable.AddCell(New PdfPCell(New Phrase("Date", font)) With {.BackgroundColor = New BaseColor(173, 216, 230), .HorizontalAlignment = Element.ALIGN_CENTER})
                pdfTable.AddCell(New PdfPCell(New Phrase("Nom", font)) With {.BackgroundColor = New BaseColor(173, 216, 230), .HorizontalAlignment = Element.ALIGN_CENTER})
                pdfTable.AddCell(New PdfPCell(New Phrase("Valeur cible", font)) With {.BackgroundColor = New BaseColor(173, 216, 230), .HorizontalAlignment = Element.ALIGN_CENTER})
                pdfTable.AddCell(New PdfPCell(New Phrase("Serrage réalisé", font)) With {.BackgroundColor = New BaseColor(173, 216, 230), .HorizontalAlignment = Element.ALIGN_CENTER})
                pdfTable.AddCell(New PdfPCell(New Phrase("Numero de serie", font)) With {.BackgroundColor = New BaseColor(173, 216, 230), .HorizontalAlignment = Element.ALIGN_CENTER})
                pdfTable.AddCell(New PdfPCell(New Phrase("Conforme ?", font)) With {.BackgroundColor = New BaseColor(173, 216, 230), .HorizontalAlignment = Element.ALIGN_CENTER})
                pdfTable.AddCell(New PdfPCell(New Phrase("Poste", font)) With {.BackgroundColor = New BaseColor(173, 216, 230), .HorizontalAlignment = Element.ALIGN_CENTER})

                isFirstPage = False
            End If
            ' Traitement des données
            Dim unixTime As Long = Convert.ToInt64(myReader("time"))
            Dim dateTime As DateTime = New DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(unixTime)

            Dim torque As Double = Convert.ToDouble(myReader("torque"))
            Dim maxTorque As Double = Convert.ToDouble(myReader("max_torque")) / 1000.0
            Dim idCell As New PdfPCell(New Phrase(myReader("id").ToString())) With {.HorizontalAlignment = Element.ALIGN_CENTER}
            Dim timeCell As New PdfPCell(New Phrase(dateTime.ToString("yyyy-MM-dd HH:mm:ss"))) With {.HorizontalAlignment = Element.ALIGN_CENTER}
            Dim nameCell As New PdfPCell(New Phrase(name)) With {.HorizontalAlignment = Element.ALIGN_CENTER}
            Dim torqueCell As New PdfPCell(New Phrase(torque.ToString("F3"))) With {.HorizontalAlignment = Element.ALIGN_CENTER}
            Dim maxTorqueCell As New PdfPCell(New Phrase(maxTorque.ToString("F3"))) With {.HorizontalAlignment = Element.ALIGN_CENTER}
            Dim sernoCell As New PdfPCell(New Phrase(myReader("serno").ToString())) With {.HorizontalAlignment = Element.ALIGN_CENTER}
            Dim difference As Double = Math.Abs(maxTorque - torque)
            Dim tolerance As Double = 20 ' Par défaut
            Dim tolerancePercentage As Double = tolerance / 100.0

            Dim conformityCell As New PdfPCell(New Phrase(conformity)) With {.HorizontalAlignment = Element.ALIGN_CENTER}
            Dim posteCell As New PdfPCell(New Phrase(poste)) With {.HorizontalAlignment = Element.ALIGN_CENTER}


            If difference > maxTorque * tolerancePercentage Then
                conformity = "Non"
                idCell.BackgroundColor = BaseColor.RED
                timeCell.BackgroundColor = BaseColor.RED
                nameCell.BackgroundColor = BaseColor.RED
                torqueCell.BackgroundColor = BaseColor.RED
                maxTorqueCell.BackgroundColor = BaseColor.RED
                sernoCell.BackgroundColor = BaseColor.RED
                conformityCell = New PdfPCell(New Phrase(conformity)) With {.HorizontalAlignment = Element.ALIGN_CENTER}
                conformityCell.BackgroundColor = BaseColor.RED
                posteCell = New PdfPCell(New Phrase(poste)) With {.HorizontalAlignment = Element.ALIGN_CENTER}
                posteCell.BackgroundColor = BaseColor.RED
                totalNonConformes = totalNonConformes + 1
            Else
                conformity = "Oui"
                totalConformes = totalConformes + 1
            End If


            Dim serrage As New Dictionary(Of String, Object)()
            serrage("name") = name
            serrages.Add(serrage)
            If Not name.StartsWith("VB") And Not name.StartsWith("Direkt") Then

                pdfTable.AddCell(idCell)
                pdfTable.AddCell(timeCell)
                pdfTable.AddCell(nameCell)
                pdfTable.AddCell(torqueCell)
                pdfTable.AddCell(maxTorqueCell)
                pdfTable.AddCell(sernoCell)
                pdfTable.AddCell(conformityCell)
                pdfTable.AddCell(posteCell)


                pages = pages + 1
                If pages = 16 Then
                    document.Add(pdfTable)
                    document.NewPage()
                    isFirstPage = True
                    pages = 0
                    pdfTable.Rows.Clear()
                End If
                If Not summaryData.ContainsKey(name) Then
                    summaryData(name) = New Dictionary(Of String, Integer)()
                    summaryData(name)("Conformes") = 0
                    summaryData(name)("Non conformes") = 0
                End If

                If conformity = "Oui" Then
                    summaryData(name)("Conformes") += 1
                Else
                    summaryData(name)("Non conformes") += 1
                End If
            Else
                If Not summaryData.ContainsKey(name) Then
                    summaryData(name) = New Dictionary(Of String, Integer)()
                    summaryData(name)("Conformes") = 0
                    summaryData(name)("Non conformes") = 0
                End If

                If conformity = "Oui" Then
                    summaryData(name)("Conformes") += 1
                Else
                    summaryData(name)("Non conformes") += 1
                End If
                countVB += 1
            End If



        End While
        Dim fontrecap As iTextSharp.text.Font = FontFactory.GetFont(FontFactory.HELVETICA, 15)
        Dim pdfTableSummary As New PdfPTable(4)
        pdfTableSummary.TotalWidth = pageWidth
        pdfTableSummary.LockedWidth = True

        pdfTableSummary.AddCell(New PdfPCell(New Phrase("Nom", fontrecap)) With {.BackgroundColor = New BaseColor(173, 216, 230), .HorizontalAlignment = Element.ALIGN_CENTER})
        pdfTableSummary.AddCell(New PdfPCell(New Phrase("Conforme", fontrecap)) With {.BackgroundColor = New BaseColor(173, 216, 230), .HorizontalAlignment = Element.ALIGN_CENTER})
        pdfTableSummary.AddCell(New PdfPCell(New Phrase("Non conforme", fontrecap)) With {.BackgroundColor = New BaseColor(173, 216, 230), .HorizontalAlignment = Element.ALIGN_CENTER})
        pdfTableSummary.AddCell(New PdfPCell(New Phrase("Nombre total", fontrecap)) With {.BackgroundColor = New BaseColor(173, 216, 230), .HorizontalAlignment = Element.ALIGN_CENTER})

        For Each kvp As KeyValuePair(Of String, Dictionary(Of String, Integer)) In summaryData
            pdfTableSummary.AddCell(New PdfPCell(New Phrase(kvp.Key, fontrecap)) With {.HorizontalAlignment = Element.ALIGN_CENTER})
            pdfTableSummary.AddCell(New PdfPCell(New Phrase(kvp.Value("Conforme").ToString(), fontrecap)) With {.HorizontalAlignment = Element.ALIGN_CENTER})
            pdfTableSummary.AddCell(New PdfPCell(New Phrase(kvp.Value("Non conforme").ToString(), fontrecap)) With {.HorizontalAlignment = Element.ALIGN_CENTER})
            pdfTableSummary.AddCell(New PdfPCell(New Phrase((kvp.Value("Conforme") + kvp.Value("Non conforme")).ToString(), fontrecap)) With {.HorizontalAlignment = Element.ALIGN_CENTER})
        Next

        document.Add(pdfTableSummary)

        MsgBox("nombre de serrages non securitaires" & countVB)
        MsgBox("export fait")
        document.Close()
        writer.Close()
        output.Close()
        myReader.Close()
        sqlite_conn.Close()
    End Sub
End Class
